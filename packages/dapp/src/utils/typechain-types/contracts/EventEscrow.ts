/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EventEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "beneficiaries"
      | "distributePayments"
      | "payouts"
      | "totalShares"
      | "usdcToken"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PaymentDistributed"): EventFragment;

  encodeFunctionData(
    functionFragment: "beneficiaries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributePayments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payouts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "beneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributePayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payouts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
}

export namespace PaymentDistributedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    amount: BigNumberish,
    indexedcaller: AddressLike
  ];
  export type OutputTuple = [
    beneficiary: string,
    amount: bigint,
    indexedcaller: string
  ];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
    indexedcaller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): EventEscrow;
  waitForDeployment(): Promise<this>;

  interface: EventEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  beneficiaries: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  distributePayments: TypedContractMethod<[], [void], "nonpayable">;

  payouts: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalShares: TypedContractMethod<[], [bigint], "view">;

  usdcToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "beneficiaries"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "distributePayments"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "payouts"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalShares"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "PaymentDistributed"
  ): TypedContractEvent<
    PaymentDistributedEvent.InputTuple,
    PaymentDistributedEvent.OutputTuple,
    PaymentDistributedEvent.OutputObject
  >;

  filters: {
    "PaymentDistributed(address,uint256,address)": TypedContractEvent<
      PaymentDistributedEvent.InputTuple,
      PaymentDistributedEvent.OutputTuple,
      PaymentDistributedEvent.OutputObject
    >;
    PaymentDistributed: TypedContractEvent<
      PaymentDistributedEvent.InputTuple,
      PaymentDistributedEvent.OutputTuple,
      PaymentDistributedEvent.OutputObject
    >;
  };
}
