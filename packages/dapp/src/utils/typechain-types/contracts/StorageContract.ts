/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface StorageContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "controller"
      | "fundContract"
      | "initializeController"
      | "revenueSharingContract"
      | "setContracts"
      | "setThreshold"
      | "threshold"
      | "usdc"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ContractFunded" | "FundsSentToRevenueSharing"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revenueSharingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setContracts",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueSharingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
}

export namespace ContractFundedEvent {
  export type InputTuple = [funder: AddressLike, amount: BigNumberish];
  export type OutputTuple = [funder: string, amount: bigint];
  export interface OutputObject {
    funder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsSentToRevenueSharingEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StorageContract extends BaseContract {
  connect(runner?: ContractRunner | null): StorageContract;
  waitForDeployment(): Promise<this>;

  interface: StorageContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  controller: TypedContractMethod<[], [string], "view">;

  fundContract: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  initializeController: TypedContractMethod<
    [_controller: AddressLike],
    [void],
    "nonpayable"
  >;

  revenueSharingContract: TypedContractMethod<[], [string], "view">;

  setContracts: TypedContractMethod<
    [_revenueSharingContract: AddressLike, _usdc: AddressLike],
    [void],
    "nonpayable"
  >;

  setThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  threshold: TypedContractMethod<[], [bigint], "view">;

  usdc: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "controller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fundContract"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initializeController"
  ): TypedContractMethod<[_controller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revenueSharingContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setContracts"
  ): TypedContractMethod<
    [_revenueSharingContract: AddressLike, _usdc: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "threshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ContractFunded"
  ): TypedContractEvent<
    ContractFundedEvent.InputTuple,
    ContractFundedEvent.OutputTuple,
    ContractFundedEvent.OutputObject
  >;
  getEvent(
    key: "FundsSentToRevenueSharing"
  ): TypedContractEvent<
    FundsSentToRevenueSharingEvent.InputTuple,
    FundsSentToRevenueSharingEvent.OutputTuple,
    FundsSentToRevenueSharingEvent.OutputObject
  >;

  filters: {
    "ContractFunded(address,uint256)": TypedContractEvent<
      ContractFundedEvent.InputTuple,
      ContractFundedEvent.OutputTuple,
      ContractFundedEvent.OutputObject
    >;
    ContractFunded: TypedContractEvent<
      ContractFundedEvent.InputTuple,
      ContractFundedEvent.OutputTuple,
      ContractFundedEvent.OutputObject
    >;

    "FundsSentToRevenueSharing(uint256)": TypedContractEvent<
      FundsSentToRevenueSharingEvent.InputTuple,
      FundsSentToRevenueSharingEvent.OutputTuple,
      FundsSentToRevenueSharingEvent.OutputObject
    >;
    FundsSentToRevenueSharing: TypedContractEvent<
      FundsSentToRevenueSharingEvent.InputTuple,
      FundsSentToRevenueSharingEvent.OutputTuple,
      FundsSentToRevenueSharingEvent.OutputObject
    >;
  };
}
