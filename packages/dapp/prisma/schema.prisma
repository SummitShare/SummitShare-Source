generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model contracts {
  contract_address                  String  @id
  event_id                          String? @db.Uuid
  contract_type                     String?
  events_contracts_event_idToevents events? @relation("contracts_event_idToevents", fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model events {
  id                                   String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  event_type                           event_type_enum?
  event_name                           String?
  user_id                              String?                  @db.Uuid
  event_category                       event_category_enum?
  event_start_time                     DateTime?                @db.Timestamp(6)
  event_timezone                       String?
  event_location                       String?
  description                          String?
  event_end_time                       DateTime?                @db.Timestamp(6)
  cost                                 Decimal?                 @db.Decimal(10, 2)
  total_number_tickets                 Int?
  created_at                           DateTime                 @default(now()) @db.Timestamp(6)
  symbol                               String?                  @db.VarChar(5)
  collections                          collections[]
  contracts_contracts_event_idToevents contracts[]              @relation("contracts_event_idToevents")
  event_collections                    event_collections[]
  event_images                         event_images[]
  users                                users?                   @relation(fields: [user_id], references: [id])
  latest_rejecters_queue               latest_rejecters_queue[]
  proposals                            proposals[]
  requests                             requests[]
  stakeholders                         stakeholders[]
  ticket_transaction                   ticket_transaction[]
  tickets                              tickets[]
}

model proposals {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  event_id               String?                  @db.Uuid
  user_id                String?                  @db.Uuid
  content                Json                     @db.Json
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  previous_proposal_id   String?                  @db.Uuid
  latest_rejecters_queue latest_rejecters_queue[]
  proposal_images        proposal_images[]
  events                 events?                  @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                  users?                   @relation(fields: [user_id], references: [id])
  proposals              proposals?               @relation("proposalsToproposals", fields: [previous_proposal_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_proposals_previous_proposal_id_fkey")
  other_proposals        proposals[]              @relation("proposalsToproposals")
  requests               requests[]
  stakeholders           stakeholders[]
  votes                  votes[]
}

model requests {
  id            String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  event_id      String?    @db.Uuid
  status        String     @default("Pending")
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  email_address String?    @db.VarChar(255)
  token         String     @unique(map: "requsts_token_unique") @db.Uuid
  proposal_id   String?    @db.Uuid
  proposals     proposals? @relation(fields: [proposal_id], references: [id], onDelete: Cascade, map: "public_requests_proposal_id_fkey")
  events        events?    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model stakeholders {
  stakeholder_id     String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id            String?              @db.Uuid
  event_id           String?              @db.Uuid
  stake              Int?
  wallet_address     String?              @db.VarChar(255)
  proposal_id        String?              @db.Uuid
  fund_distributions fund_distributions[]
  proposals          proposals?           @relation(fields: [proposal_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_stakeholders_proposal_id_fkey")
  events             events?              @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users              users?               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_wallets       user_wallets?        @relation(fields: [wallet_address], references: [wallet_address], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                                                                          String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                                                                       String                    @unique @db.VarChar(255)
  username                                                                    String?                   @unique @db.VarChar(255)
  password                                                                    String
  bio                                                                         String?
  email_verified                                                              Boolean?                  @default(false)
  type                                                                        String?
  email_verification                                                          email_verification[]
  events                                                                      events[]
  exhibitor_account_users_exhibitor_account_users_exhibitor_account_idTousers exhibitor_account_users[] @relation("exhibitor_account_users_exhibitor_account_idTousers")
  exhibitor_account_users_exhibitor_account_users_user_idTousers              exhibitor_account_users[] @relation("exhibitor_account_users_user_idTousers")
  latest_rejecters_queue                                                      latest_rejecters_queue[]
  password_reset_tokens                                                       password_reset_tokens[]
  proposals                                                                   proposals[]
  social_media_links                                                          social_media_links[]
  stakeholders                                                                stakeholders[]
  ticket_transaction                                                          ticket_transaction[]
  tickets                                                                     tickets[]
  user_images                                                                 user_images[]
  user_sessions                                                               user_sessions[]
  user_wallets                                                                user_wallets[]
  user_types                                                                  user_types?               @relation(fields: [type], references: [type], map: "public_users_type_fkey")
  votes                                                                       votes[]
}

model votes {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  proposal_id String?    @db.Uuid
  user_id     String?    @db.Uuid
  decision    Boolean
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  proposals   proposals? @relation(fields: [proposal_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model email_verification {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?  @db.Uuid
  token      String   @unique(map: "email_verification_token_unique")
  expires    DateTime @db.Timestamp(6)
  created_at DateTime @db.Timestamp(6)
  users      users?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model event_images {
  id            String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  url           String
  event_id      String?          @db.Uuid
  image_type    image_type_enum?
  gallery_index Int?             @db.SmallInt
  events        events?          @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model exhibitor_account_users {
  id                                                        String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  exhibitor_account_id                                      String? @db.Uuid
  user_id                                                   String? @db.Uuid
  role                                                      String
  users_exhibitor_account_users_exhibitor_account_idTousers users?  @relation("exhibitor_account_users_exhibitor_account_idTousers", fields: [exhibitor_account_id], references: [id], onDelete: Cascade)
  users_exhibitor_account_users_user_idTousers              users?  @relation("exhibitor_account_users_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([exhibitor_account_id, user_id], map: "exhibitor_account_users_unique")
}

model fund_distributions {
  id                       String        @id
  stakeholder_id           String?       @db.Uuid
  amount                   Decimal       @db.Decimal(10, 2)
  transaction_time         DateTime      @default(now()) @db.Timestamp(6)
  receiving_wallet_address String?
  stakeholders             stakeholders? @relation(fields: [stakeholder_id], references: [stakeholder_id], onDelete: NoAction, onUpdate: NoAction)
}

model latest_rejecters_queue {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  event_id    String?    @db.Uuid
  proposal_id String?    @db.Uuid
  user_id     String?    @db.Uuid
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  events      events?    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  proposals   proposals? @relation(fields: [proposal_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users?     @relation(fields: [user_id], references: [id])
}

model social_media_links {
  id            String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String? @db.Uuid
  linkedin_url  String?
  facebook_url  String?
  twitter_url   String?
  instagram_url String?
  users         users?  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model ticket_transaction {
  id               String   @id(map: "tickets_transactions_pkey")
  event_id         String?  @db.Uuid
  price            Decimal  @db.Decimal(10, 2)
  transaction_time DateTime @default(now()) @db.Timestamp(6)
  user_id          String   @db.Uuid
  wallet_address   String?  @db.VarChar(255)
  transaction_id   String?  @db.VarChar(255)
  users            users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  events           events?  @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tickets_transactions_event_id_fkey")
}

model tickets {
  event_id       String?   @db.Uuid
  wallet_address String?
  purchased_at   DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamp(6)
  validity       Int?
  id             Int       @id @default(autoincrement())
  user_id        String    @db.Uuid
  events         events?   @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user_images {
  id            String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  url           String
  user_id       String?          @db.Uuid
  image_type    image_type_enum?
  gallery_index Int?
  users         users?           @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model user_sessions {
  session_id    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?  @db.Uuid
  expires       DateTime @db.Timestamp(6)
  session_token String
  access_token  String
  creation_time DateTime @db.Timestamp(6)
  update_time   DateTime @db.Timestamp(6)
  users         users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_types {
  id          Int     @id
  type        String  @unique(map: "user_types_type_name_key")
  description String?
  users       users[]
}

model user_wallets {
  id             String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id        String         @db.Uuid
  wallet_address String         @unique(map: "wallet_address_unique")
  index          Int?           @db.SmallInt
  stakeholders   stakeholders[]
  users          users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model artifacts {
  name          String?      @db.VarChar(255)
  image_url     String?      @db.VarChar(255)
  content       Json?
  collection_id String?      @db.Uuid
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  index         Int?
  base_uri      String?      @db.VarChar
  collections   collections? @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model collections {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String?             @db.VarChar(255)
  baseURI           String?
  event_id          String?             @db.Uuid
  artifacts         artifacts[]
  events            events?             @relation(fields: [event_id], references: [id], onUpdate: NoAction, map: "fk_event")
  event_collections event_collections[]
}

model event_collections {
  event_id      String      @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  collection_id String      @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  collections   collections @relation(fields: [collection_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  events        events      @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([event_id, collection_id])
}

model proposal_images {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  proposal_id   String           @db.Uuid
  url           String           @db.VarChar
  image_type    image_type_enum?
  gallery_index Int?             @db.SmallInt
  proposals     proposals        @relation(fields: [proposal_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model password_reset_tokens {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum decision {
  Agree
  Disagree
}

enum imagetype {
  Profile
  Cover
  Gallery
}

enum roletype {
  Admin
  User
}

enum status {
  Pending
  Accepted
  Declined
}

enum typename {
  Physical
  Virtual
}

enum event_category_enum {
  solo_exhibitions
  group_exhibitions
  museum_exhibitions
  art_event_exhibitions
}

enum event_type_enum {
  Physical
  Virtual
}

enum image_type_enum {
  Profile
  Cover
  Gallery
}
